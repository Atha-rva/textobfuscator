   
        // Unicode look-alike mappings
        const unicodeMappings = {
            'a': ['–∞', '…ë', 'Œ±', 'ÔΩÅ'], 'b': ['—å', '–±', 'Œ≤', 'ÔΩÇ'],
            'c': ['—Å', 'œ≤', '√ß', 'ÔΩÉ'], 'd': ['‘Å', '…ó', 'Œ¥', 'ÔΩÑ'],
            'e': ['–µ', 'Œµ', '√©', 'ÔΩÖ'], 'f': ['∆í', 'œÜ', '·∏ü', 'ÔΩÜ'],
            'g': ['…°', 'Œ≥', 'ƒü', 'ÔΩá'], 'h': ['“ª', 'Œ∑', '·∏ß', 'ÔΩà'],
            'i': ['—ñ', 'Œπ', '√≠', 'ÔΩâ'], 'j': ['—ò', ' ù', 'ƒµ', 'ÔΩä'],
            'k': ['–∫', 'Œ∫', '·∏≥', 'ÔΩã'], 'l': ['”è', 'Œª', '·∏∑', 'ÔΩå'],
            'm': ['–º', 'Œº', '·πÉ', 'ÔΩç'], 'n': ['–ø', 'Œ∑', '·πÖ', 'ÔΩé'],
            'o': ['–æ', 'Œø', '√∂', 'ÔΩè'], 'p': ['—Ä', 'œÅ', '·πó', 'ÔΩê'],
            'q': ['‘õ', 'œõ', '·∏≥', 'ÔΩë'], 'r': ['–≥', 'œÅ', '≈ï', 'ÔΩí'],
            's': ['—ï', 'œÉ', '≈õ', 'ÔΩì'], 't': ['—Ç', 'œÑ', '·π´', 'ÔΩî'],
            'u': ['œÖ', '≈≥', '√∫', 'ÔΩï'], 'v': ['ŒΩ', '—µ', '·πΩ', 'ÔΩñ'],
            'w': ['‘ù', 'œâ', '·∫Ö', 'ÔΩó'], 'x': ['—Ö', 'œá', '·∫ç', 'ÔΩò'],
            'y': ['—É', 'œà', '·∫è', 'ÔΩô'], 'z': ['·¥¢', 'Œ∂', '·∫ë', 'ÔΩö']
        };

        // Leet speak mappings
        const leetMappings = {
            'a': ['4', '@', '/-\\', '^'], 'b': ['8', '6', '|3', '13'],
            'c': ['(', '[', '<', '{'], 'd': ['|)', '|]', '|}', '|>'],
            'e': ['3', '‚Ç¨', '¬£', '&'], 'f': ['|=', 'ph', '|#', '7'],
            'g': ['9', '6', '&', 'C-'], 'h': ['|-|', '#', '|-', '}{'],
            'i': ['1', '!', '|', ']['], 'j': ['_|', ']', '¬ø', '_/'],
            'k': ['|<', '|{', '|X', '|('], 'l': ['1', '|', '|_', '7'],
            'm': ['|V|', '/\\/\\', '|\\/|', 'AA'], 'n': ['|\\|', '/\\/', '|V', '//'],
            'o': ['0', '()', '[]', '<>'], 'p': ['|*', '|>', '|"', '|¬∞'],
            'q': ['0_', '9', '(,)', '0,'], 'r': ['|2', '12', '|?', '|^'],
            's': ['5', '$', 'z', '¬ß'], 't': ['7', '+', '‚Ä†', '|-'],
            'u': ['|_|', '(_)', '[_]', '|J'], 'v': ['\\/', '|/', '\\|', 'V'],
            'w': ['vv', '\\/\\/', '\\V/', 'UU'], 'x': ['><', '}{', ')(', '%'],
            'y': ['`/', '\\|/', '\\/', '`('], 'z': ['2', '7_', '-/_', '%']
        };

        // Symbol mappings
        const symbolMappings = {
            'a': ['‚ô†', '‚ô¶', '‚ô£', '‚ô•'], 'b': ['‚ô™', '‚ô´', '‚ô¨', '‚ô≠'],
            'c': ['‚òæ', '‚òΩ', '‚ò™', '‚ò´'], 'd': ['‚ô†', '‚ô¶', '‚ô£', '‚ô•'],
            'e': ['‚òÖ', '‚òÜ', '‚ú¶', '‚úß'], 'f': ['‚ôÄ', '‚ôÇ', '‚ö§', '‚ö•'],
            'g': ['‚òÄ', '‚òÅ', '‚òÇ', '‚òÉ'], 'h': ['‚ô®', '‚ô©', '‚ô™', '‚ô´'],
            'i': ['‚ô§', '‚ôß', '‚ô°', '‚ô¢'], 'j': ['‚òØ', '‚òÆ', '‚ò¢', '‚ò£'],
            'k': ['‚ôî', '‚ôï', '‚ôñ', '‚ôó'], 'l': ['‚ôò', '‚ôô', '‚ôö', '‚ôõ'],
            'm': ['‚ò∫', '‚òª', '‚òπ', '‚òÉ'], 'n': ['‚ô¶', '‚ô£', '‚ô†', '‚ô•'],
            'o': ['‚óØ', '‚óã', '‚óè', '‚óâ'], 'p': ['‚ôû', '‚ôü', '‚ôú', '‚ôù'],
            'q': ['‚ôõ', '‚ôö', '‚ôû', '‚ôü'], 'r': ['‚ôú', '‚ôù', '‚ôõ', '‚ôö'],
            's': ['¬ß', '‚à´', '‚à¨', '‚à≠'], 't': ['‚Ä†', '‚Ä°', '‚úù', '‚úû'],
            'u': ['‚à™', '‚à©', '‚àÜ', '‚àá'], 'v': ['‚à®', '‚àß', '‚àÄ', '‚àÉ'],
            'w': ['‚à¨', '‚à≠', '‚àÆ', '‚àØ'], 'x': ['√ó', '‚úó', '‚úò', '‚úñ'],
            'y': ['¬•', '¬¢', '¬£', '‚Ç¨'], 'z': ['‚Ñ®', '‚Ñ§', '‚Ñ•', '‚ÑÜ']
        };

        // Fancy Unicode mappings
        const fancyMappings = {
            'a': ['ùîû', 'ùñÜ', 'ùí∂', 'ùì™'], 'b': ['ùîü', 'ùñá', 'ùí∑', 'ùì´'],
            'c': ['ùî†', 'ùñà', 'ùí∏', 'ùì¨'], 'd': ['ùî°', 'ùñâ', 'ùíπ', 'ùì≠'],
            'e': ['ùî¢', 'ùñä', 'ùëí', 'ùìÆ'], 'f': ['ùî£', 'ùñã', 'ùíª', 'ùìØ'],
            'g': ['ùî§', 'ùñå', 'ùëî', 'ùì∞'], 'h': ['ùî•', 'ùñç', 'ùíΩ', 'ùì±'],
            'i': ['ùî¶', 'ùñé', 'ùíæ', 'ùì≤'], 'j': ['ùîß', 'ùñè', 'ùíø', 'ùì≥'],
            'k': ['ùî®', 'ùñê', 'ùìÄ', 'ùì¥'], 'l': ['ùî©', 'ùñë', 'ùìÅ', 'ùìµ'],
            'm': ['ùî™', 'ùñí', 'ùìÇ', 'ùì∂'], 'n': ['ùî´', 'ùñì', 'ùìÉ', 'ùì∑'],
            'o': ['ùî¨', 'ùñî', 'ùìÑ', 'ùì∏'], 'p': ['ùî≠', 'ùñï', 'ùìÖ', 'ùìπ'],
            'q': ['ùîÆ', 'ùññ', 'ùìÜ', 'ùì∫'], 'r': ['ùîØ', 'ùñó', 'ùìá', 'ùìª'],
            's': ['ùî∞', 'ùñò', 'ùìà', 'ùìº'], 't': ['ùî±', 'ùñô', 'ùìâ', 'ùìΩ'],
            'u': ['ùî≤', 'ùñö', 'ùìä', 'ùìæ'], 'v': ['ùî≥', 'ùñõ', 'ùìã', 'ùìø'],
            'w': ['ùî¥', 'ùñú', 'ùìå', 'ùîÄ'], 'x': ['ùîµ', 'ùñù', 'ùìç', 'ùîÅ'],
            'y': ['ùî∂', 'ùñû', 'ùìé', 'ùîÇ'], 'z': ['ùî∑', 'ùñü', 'ùìè', 'ùîÉ']
        };

        function getIntensity() {
            return parseInt(document.getElementById('intensitySlider').value);
        }

        function updateIntensityLabel() {
            const intensity = getIntensity();
            const labels = ['', 'Low', 'Medium', 'High'];
            document.getElementById('intensityValue').textContent = labels[intensity];
        }

        function obfuscateUnicode(text) {
            const intensity = getIntensity();
            return text.toLowerCase().split('').map(char => {
                if (unicodeMappings[char]) {
                    const options = unicodeMappings[char].slice(0, intensity);
                    return options[Math.floor(Math.random() * options.length)];
                }
                return char;
            }).join('');
        }

        function obfuscateLeet(text) {
            const intensity = getIntensity();
            return text.toLowerCase().split('').map(char => {
                if (leetMappings[char]) {
                    const options = leetMappings[char].slice(0, intensity);
                    return options[Math.floor(Math.random() * options.length)];
                }
                return char;
            }).join('');
        }

        function obfuscateSymbol(text) {
            const intensity = getIntensity();
            return text.toLowerCase().split('').map(char => {
                if (symbolMappings[char]) {
                    const options = symbolMappings[char].slice(0, intensity);
                    return options[Math.floor(Math.random() * options.length)];
                }
                return char === ' ' ? ' ' : '‚ó¶';
            }).join('');
        }

        function obfuscateFancy(text) {
            const intensity = getIntensity();
            return text.toLowerCase().split('').map(char => {
                if (fancyMappings[char]) {
                    const options = fancyMappings[char].slice(0, intensity);
                    return options[Math.floor(Math.random() * options.length)];
                }
                return char;
            }).join('');
        }

        function obfuscateReverse(text) {
            const words = text.split(' ');
            return words.map(word => {
                const reversed = word.split('').reverse().join('');
                return reversed.split('').map(char => {
                    // Add some random capitalization
                    return Math.random() > 0.5 ? char.toUpperCase() : char.toLowerCase();
                }).join('');
            }).join(' ');
        }

        function obfuscateBinary(text) {
            return text.split('').map(char => {
                const binary = char.charCodeAt(0).toString(2).padStart(8, '0');
                return binary;
            }).join(' ');
        }

        function obfuscateAll() {
            const inputText = document.getElementById('inputText').value;
            
            if (!inputText.trim()) {
                alert('Please enter some text to obfuscate!');
                return;
            }

            document.getElementById('unicodeOutput').innerHTML = 
                '<button class="copy-btn" onclick="copyToClipboard(\'unicodeOutput\')">Copy</button>' +
                obfuscateUnicode(inputText);
            
            document.getElementById('leetOutput').innerHTML = 
                '<button class="copy-btn" onclick="copyToClipboard(\'leetOutput\')">Copy</button>' +
                obfuscateLeet(inputText);
            
            document.getElementById('symbolOutput').innerHTML = 
                '<button class="copy-btn" onclick="copyToClipboard(\'symbolOutput\')">Copy</button>' +
                obfuscateSymbol(inputText);
            
            document.getElementById('fancyOutput').innerHTML = 
                '<button class="copy-btn" onclick="copyToClipboard(\'fancyOutput\')">Copy</button>' +
                obfuscateFancy(inputText);
            
            document.getElementById('reverseOutput').innerHTML = 
                '<button class="copy-btn" onclick="copyToClipboard(\'reverseOutput\')">Copy</button>' +
                obfuscateReverse(inputText);
            
            document.getElementById('binaryOutput').innerHTML = 
                '<button class="copy-btn" onclick="copyToClipboard(\'binaryOutput\')">Copy</button>' +
                obfuscateBinary(inputText);

            updateStats(inputText);
        }

        function clearAll() {
            document.getElementById('inputText').value = '';
            const outputs = ['unicodeOutput', 'leetOutput', 'symbolOutput', 'fancyOutput', 'reverseOutput', 'binaryOutput'];
            outputs.forEach(id => {
                document.getElementById(id).innerHTML = 
                    '<button class="copy-btn" onclick="copyToClipboard(\'' + id + '\')">Copy</button>' +
                    'Your ' + id.replace('Output', '') + ' text will appear here...';
            });
            updateStats('');
        }

        function copyToClipboard(elementId) {
            const element = document.getElementById(elementId);
            const text = element.textContent.replace('Copy', '').trim();
            
            if (text && text !== 'Your ' + elementId.replace('Output', '') + ' text will appear here...') {
                navigator.clipboard.writeText(text).then(() => {
                    const btn = element.querySelector('.copy-btn');
                    const originalText = btn.textContent;
                    btn.textContent = 'Copied!';
                    btn.style.background = 'rgba(0, 255, 0, 0.3)';
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.style.background = 'rgba(255, 255, 255, 0.2)';
                    }, 2000);
                });
            }
        }

        function copyAllResults() {
            const results = [];
            const outputs = ['unicodeOutput', 'leetOutput', 'symbolOutput', 'fancyOutput', 'reverseOutput', 'binaryOutput'];
            const labels = ['Unicode Look-alikes', 'Leet Speak', 'Symbol Cipher', 'Fancy Unicode', 'Reverse Cipher', 'Binary Code'];
            
            outputs.forEach((id, index) => {
                const element = document.getElementById(id);
                const text = element.textContent.replace('Copy', '').trim();
                if (text && text !== 'Your ' + id.replace('Output', '') + ' text will appear here...') {
                    results.push(`${labels[index]}: ${text}`);
                }
            });
            
            if (results.length > 0) {
                const allText = results.join('\n\n');
                navigator.clipboard.writeText(allText).then(() => {
                    alert('All results copied to clipboard!');
                });
            } else {
                alert('No results to copy! Please obfuscate some text first.');
            }
        }

        function updateStats(text) {
            const charCount = text.length;
            const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;
            const methodCount = text.trim() ? 6 : 0;
            
            document.getElementById('charCount').textContent = charCount;
            document.getElementById('wordCount').textContent = wordCount;
            document.getElementById('methodCount').textContent = methodCount;
        }

        // Event listeners
        document.getElementById('inputText').addEventListener('input', function() {
            updateStats(this.value);
        });

        document.getElementById('intensitySlider').addEventListener('input', updateIntensityLabel);

        // Initialize
        updateIntensityLabel();
        updateStats('');
  